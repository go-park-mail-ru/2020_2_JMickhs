basePath: /
consumes:
- application/json
- multipart/form-data
definitions:
  AddCommentRequest:
    properties:
      hotel_id:
        format: int64
        type: integer
        x-go-name: HotelID
      message:
        type: string
        x-go-name: Message
      rating:
        format: int64
        type: integer
        x-go-name: Rating
      user_id:
        format: int64
        type: integer
        x-go-name: UserID
    type: object
    x-go-package: github.com/go-park-mail-ru/2020_2_JMickhs/api/swagger
  Avatar:
    properties:
      avatar:
        type: string
        x-go-name: Avatar
    type: object
    x-go-package: github.com/go-park-mail-ru/2020_2_JMickhs/api/swagger
  Comment:
    properties:
      comm_id:
        format: int64
        type: integer
        x-go-name: CommID
      hotel_id:
        format: int64
        type: integer
        x-go-name: HotelID
      message:
        type: string
        x-go-name: Message
      rating:
        format: int64
        type: integer
        x-go-name: Rating
      user_id:
        format: int64
        type: integer
        x-go-name: UserID
    type: object
    x-go-package: github.com/go-park-mail-ru/2020_2_JMickhs/internal/comment/models
  Cursor:
    properties:
      nextcursor:
        type: string
        x-go-name: NextCursor
      prevcursor:
        type: string
        x-go-name: PrevCursor
    type: object
    x-go-package: github.com/go-park-mail-ru/2020_2_JMickhs/internal/hotels/models
  File:
    allOf:
    - properties:
        Close:
          type: string
      type: object
    - type: object
    - type: object
    - type: object
    description: |-
      Its contents may be either stored in memory or on disk.
      If stored on disk, the File's underlying concrete type will be an *os.File.
    title: File is an interface to access the file part of a multipart message.
    type: object
    x-go-package: mime/multipart
  FullCommentInfo:
    properties:
      avatar:
        type: string
        x-go-name: Avatar
      comm_id:
        format: int64
        type: integer
        x-go-name: CommID
      hotel_id:
        format: int64
        type: integer
        x-go-name: HotelID
      message:
        type: string
        x-go-name: Message
      rating:
        format: int64
        type: integer
        x-go-name: Rating
      user_id:
        format: int64
        type: integer
        x-go-name: UserID
      username:
        type: string
        x-go-name: Username
    type: object
    x-go-package: github.com/go-park-mail-ru/2020_2_JMickhs/internal/comment/models
  Hotel:
    properties:
      description:
        type: string
        x-go-name: Description
      hotel_id:
        format: int64
        type: integer
        x-go-name: HotelID
      image:
        type: string
        x-go-name: Image
      location:
        type: string
        x-go-name: Location
      name:
        type: string
        x-go-name: Name
      rating:
        type: string
        x-go-name: Rating
    type: object
    x-go-package: github.com/go-park-mail-ru/2020_2_JMickhs/internal/hotels/models
  NewRate:
    properties:
      newrate:
        format: int64
        type: integer
        x-go-name: Rate
    type: object
    x-go-package: github.com/go-park-mail-ru/2020_2_JMickhs/internal/hotels/models
  RateRequest:
    properties:
      hotel_id:
        format: int64
        type: integer
        x-go-name: HotelID
      rate:
        format: int64
        type: integer
        x-go-name: Rate
      user_id:
        format: int64
        type: integer
        x-go-name: UserID
    type: object
    x-go-package: github.com/go-park-mail-ru/2020_2_JMickhs/api/swagger
  SafeUser:
    properties:
      avatar:
        type: string
        x-go-name: Avatar
      email:
        type: string
        x-go-name: Email
      id:
        format: int64
        type: integer
        x-go-name: ID
      username:
        type: string
        x-go-name: Username
    type: object
    x-go-package: github.com/go-park-mail-ru/2020_2_JMickhs/internal/user/models
  SearchDataResponse:
    properties:
      cursor:
        $ref: '#/definitions/Cursor'
      hotels:
        items:
          $ref: '#/definitions/Hotel'
        type: array
        x-go-name: Hotels
    type: object
    x-go-package: github.com/go-park-mail-ru/2020_2_JMickhs/api/swagger
  UpdateAvatar:
    properties:
      avatar:
        $ref: '#/definitions/File'
    type: object
    x-go-package: github.com/go-park-mail-ru/2020_2_JMickhs/api/swagger
  UpdateCommentRequest:
    properties:
      comm_id:
        format: int64
        type: integer
        x-go-name: CommID
      message:
        type: string
        x-go-name: Message
    type: object
    x-go-package: github.com/go-park-mail-ru/2020_2_JMickhs/api/swagger
  UpdatePassword:
    properties:
      newpassword:
        type: string
        x-go-name: NewPassword
      oldpassword:
        type: string
        x-go-name: OldPassword
    type: object
    x-go-package: github.com/go-park-mail-ru/2020_2_JMickhs/internal/user/models
  UpdateUser:
    properties:
      email:
        type: string
        x-go-name: Email
      username:
        type: string
        x-go-name: Username
    type: object
    x-go-package: github.com/go-park-mail-ru/2020_2_JMickhs/api/swagger
  UserAuth:
    properties:
      password:
        type: string
        x-go-name: Password
      username:
        type: string
        x-go-name: Username
    type: object
    x-go-package: github.com/go-park-mail-ru/2020_2_JMickhs/api/swagger
  UserRegistation:
    properties:
      email:
        type: string
        x-go-name: Email
      password:
        type: string
        x-go-name: Password
      username:
        type: string
        x-go-name: Username
    type: object
    x-go-package: github.com/go-park-mail-ru/2020_2_JMickhs/api/swagger
info:
  description: Swagger spec.
  title: Golang service API for HotelScanner
  version: 1.0.0
paths:
  /api/v1/comments:
    get:
      description: GetList of comments
      operationId: comments
      parameters:
      - description: the start ID to get comments
        format: int64
        in: query
        name: from
        required: true
        type: integer
        x-go-name: From
      - description: the ID of hotel which comments you get
        format: int64
        in: query
        name: id
        required: true
        type: integer
        x-go-name: ID
      responses:
        "200":
          $ref: '#/responses/comments'
        "400":
          $ref: '#/responses/badrequest'
      tags:
      - comment
    post:
      operationId: AddComment
      parameters:
      - in: body
        name: Body
        schema:
          $ref: '#/definitions/AddCommentRequest'
      responses:
        "200":
          $ref: '#/responses/AddComment'
        "400":
          $ref: '#/responses/badrequest'
        "403":
          $ref: '#/responses/Forbidden'
      tags:
      - comment
    put:
      operationId: UpdateComment
      parameters:
      - in: body
        name: Body
        schema:
          $ref: '#/definitions/UpdateCommentRequest'
      responses:
        "400":
          $ref: '#/responses/badrequest'
        "403":
          $ref: '#/responses/Forbidden'
      tags:
      - comment
  /api/v1/comments/{id}:
    delete:
      operationId: DeleteComment
      parameters:
      - description: the ID to delete comment
        format: int64
        in: path
        name: id
        required: true
        type: integer
        x-go-name: ID
      responses:
        "400":
          $ref: '#/responses/badrequest'
        "403":
          $ref: '#/responses/Forbidden'
      tags:
      - comment
  /api/v1/hotels:
    get:
      description: GetList of hotels
      operationId: hotels
      parameters:
      - description: the start ID to get hotels
        format: int64
        in: query
        name: from
        required: true
        type: integer
        x-go-name: ID
      responses:
        "200":
          $ref: '#/responses/hotels'
        "400":
          $ref: '#/responses/badrequest'
      tags:
      - hotel
  /api/v1/hotels/{id}:
    get:
      description: Get single hotel by id
      operationId: hotel
      parameters:
      - description: the id of hotel to get from database
        format: int64
        in: path
        name: id
        required: true
        type: integer
        x-go-name: ID
      responses:
        "200":
          description: Hotel
          schema:
            $ref: '#/definitions/Hotel'
        "400":
          $ref: '#/responses/badrequest'
        "410":
          $ref: '#/responses/gone'
      tags:
      - hotel
  /api/v1/hotels/search:
    get:
      description: Search hotels
      operationId: searchHotel
      parameters:
      - in: query
        name: pattern
        type: string
        x-go-name: Pattern
      - in: query
        name: prev
        type: string
        x-go-name: Prev
      - in: query
        name: next
        type: string
        x-go-name: Next
      - format: int64
        in: query
        name: limit
        required: true
        type: integer
        x-go-name: Limit
      responses:
        "200":
          $ref: '#/responses/searchHotel'
        "400":
          $ref: '#/responses/badrequest'
      tags:
      - hotel
  /api/v1/rates:
    post:
      description: Rate hotel
      operationId: rates
      parameters:
      - in: body
        name: Body
        schema:
          $ref: '#/definitions/RateRequest'
      responses:
        "200":
          $ref: '#/responses/rates'
        "400":
          $ref: '#/responses/badrequest'
        "423":
          $ref: '#/responses/locked'
      tags:
      - hotel
  /api/v1/users:
    get:
      description: Get current safe user
      operationId: user
      responses:
        "200":
          $ref: '#/responses/safeUser'
        "401":
          $ref: '#/responses/unauthorizied'
      tags:
      - Users
    post:
      description: Creates a new User
      operationId: signup
      parameters:
      - in: body
        name: Body
        schema:
          $ref: '#/definitions/UserRegistation'
      responses:
        "200":
          $ref: '#/responses/safeUser'
        "400":
          $ref: '#/responses/badrequest'
        "409":
          $ref: '#/responses/conflict'
      tags:
      - Users
  /api/v1/users/{id}:
    get:
      description: Get info abous user by his id
      operationId: userById
      parameters:
      - format: int64
        in: path
        name: id
        required: true
        type: integer
        x-go-name: ID
      responses:
        "200":
          $ref: '#/responses/safeUser'
        "400":
          $ref: '#/responses/badrequest'
        "410":
          $ref: '#/responses/gone'
      tags:
      - Users
  /api/v1/users/avatar:
    put:
      description: Update Avatar
      operationId: avatar
      parameters:
      - description: avatar in *.jpg *.jpeg *.png format
        in: body
        name: Body
        schema:
          $ref: '#/definitions/UpdateAvatar'
      responses:
        "200":
          $ref: '#/responses/avatar'
        "400":
          $ref: '#/responses/badrequest'
        "401":
          $ref: '#/responses/unauthorizied'
        "403":
          $ref: '#/responses/Forbidden'
        "415":
          $ref: '#/responses/unsupport'
      tags:
      - Users
  /api/v1/users/credentials:
    put:
      description: Get data from form  which need to change and change user data
      operationId: credentials
      parameters:
      - in: body
        name: Body
        schema:
          $ref: '#/definitions/UpdateUser'
      responses:
        "400":
          $ref: '#/responses/badrequest'
        "401":
          $ref: '#/responses/unauthorizied'
        "403":
          $ref: '#/responses/Forbidden'
      tags:
      - Users
  /api/v1/users/password:
    put:
      description: update password
      operationId: password
      parameters:
      - in: body
        name: Body
        schema:
          $ref: '#/definitions/UpdatePassword'
      responses:
        "400":
          $ref: '#/responses/badrequest'
        "401":
          $ref: '#/responses/unauthorizied'
        "402":
          $ref: '#/responses/badCredentials'
        "403":
          $ref: '#/responses/Forbidden'
      tags:
      - Users
  /api/v1/users/sessions:
    delete:
      description: sign out current user and delete cookie session
      operationId: DelSessions
      tags:
      - Sessions
    post:
      description: user auth with coockie
      operationId: AddSessions
      parameters:
      - in: body
        name: Body
        schema:
          $ref: '#/definitions/UserAuth'
      responses:
        "200":
          $ref: '#/responses/safeUser'
        "400":
          $ref: '#/responses/badrequest'
        "401":
          $ref: '#/responses/unauthorizied'
      tags:
      - Sessions
produces:
- application/json
responses:
  AddComment:
    schema:
      $ref: '#/definitions/Comment'
  Forbidden:
    description: wrong csrf token
  avatar:
    schema:
      $ref: '#/definitions/Avatar'
  badCredentials:
    description: wrong credentials
  badrequest:
    description: cannot parse data or undefined query or path parameters
  commentInfo:
    headers:
      avatar:
        type: string
      comm_id:
        format: int64
        type: integer
      hotel_id:
        format: int64
        type: integer
      message:
        type: string
      rating:
        format: int64
        type: integer
      user_id:
        format: int64
        type: integer
      username:
        type: string
  comments:
    schema:
      items:
        $ref: '#/definitions/FullCommentInfo'
      type: array
  conflict:
    description: unique data already exists
  gone:
    description: This data does not exist
  hotels:
    schema:
      items:
        $ref: '#/definitions/Hotel'
      type: array
  locked:
    description: two times rate one hotel
  rates:
    schema:
      $ref: '#/definitions/NewRate'
  safeUser:
    schema:
      $ref: '#/definitions/SafeUser'
  searchHotel:
    schema:
      $ref: '#/definitions/SearchDataResponse'
  signup:
    schema:
      $ref: '#/definitions/SafeUser'
  unauthorizied:
    description: user unauthorizied
  unsupport:
    description: Unsupported Media Type
  user:
    headers:
      avatar:
        type: string
      email:
        type: string
      id:
        format: int64
        type: integer
      password:
        type: string
      username:
        type: string
schemes:
- http
swagger: "2.0"
