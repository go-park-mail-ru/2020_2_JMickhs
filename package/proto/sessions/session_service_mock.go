// Code generated by MockGen. DO NOT EDIT.
// Source: session.pb.go

// Package sessionService is a generated GoMock package.
package sessionService

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
	reflect "reflect"
)

// MockAuthorizationServiceClient is a mock of AuthorizationServiceClient interface
type MockAuthorizationServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockAuthorizationServiceClientMockRecorder
}

// MockAuthorizationServiceClientMockRecorder is the mock recorder for MockAuthorizationServiceClient
type MockAuthorizationServiceClientMockRecorder struct {
	mock *MockAuthorizationServiceClient
}

// NewMockAuthorizationServiceClient creates a new mock instance
func NewMockAuthorizationServiceClient(ctrl *gomock.Controller) *MockAuthorizationServiceClient {
	mock := &MockAuthorizationServiceClient{ctrl: ctrl}
	mock.recorder = &MockAuthorizationServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAuthorizationServiceClient) EXPECT() *MockAuthorizationServiceClientMockRecorder {
	return m.recorder
}

// CreateSession mocks base method
func (m *MockAuthorizationServiceClient) CreateSession(ctx context.Context, in *UserID, opts ...grpc.CallOption) (*SessionID, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateSession", varargs...)
	ret0, _ := ret[0].(*SessionID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSession indicates an expected call of CreateSession
func (mr *MockAuthorizationServiceClientMockRecorder) CreateSession(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSession", reflect.TypeOf((*MockAuthorizationServiceClient)(nil).CreateSession), varargs...)
}

// GetIDBySession mocks base method
func (m *MockAuthorizationServiceClient) GetIDBySession(ctx context.Context, in *SessionID, opts ...grpc.CallOption) (*UserID, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetIDBySession", varargs...)
	ret0, _ := ret[0].(*UserID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIDBySession indicates an expected call of GetIDBySession
func (mr *MockAuthorizationServiceClientMockRecorder) GetIDBySession(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIDBySession", reflect.TypeOf((*MockAuthorizationServiceClient)(nil).GetIDBySession), varargs...)
}

// DeleteSession mocks base method
func (m *MockAuthorizationServiceClient) DeleteSession(ctx context.Context, in *SessionID, opts ...grpc.CallOption) (*Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteSession", varargs...)
	ret0, _ := ret[0].(*Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSession indicates an expected call of DeleteSession
func (mr *MockAuthorizationServiceClientMockRecorder) DeleteSession(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSession", reflect.TypeOf((*MockAuthorizationServiceClient)(nil).DeleteSession), varargs...)
}

// CreateCsrfToken mocks base method
func (m *MockAuthorizationServiceClient) CreateCsrfToken(ctx context.Context, in *CsrfTokenInput, opts ...grpc.CallOption) (*CsrfToken, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateCsrfToken", varargs...)
	ret0, _ := ret[0].(*CsrfToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCsrfToken indicates an expected call of CreateCsrfToken
func (mr *MockAuthorizationServiceClientMockRecorder) CreateCsrfToken(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCsrfToken", reflect.TypeOf((*MockAuthorizationServiceClient)(nil).CreateCsrfToken), varargs...)
}

// CheckCsrfToken mocks base method
func (m *MockAuthorizationServiceClient) CheckCsrfToken(ctx context.Context, in *CsrfTokenCheck, opts ...grpc.CallOption) (*CheckResult, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CheckCsrfToken", varargs...)
	ret0, _ := ret[0].(*CheckResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckCsrfToken indicates an expected call of CheckCsrfToken
func (mr *MockAuthorizationServiceClientMockRecorder) CheckCsrfToken(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckCsrfToken", reflect.TypeOf((*MockAuthorizationServiceClient)(nil).CheckCsrfToken), varargs...)
}

// MockAuthorizationServiceServer is a mock of AuthorizationServiceServer interface
type MockAuthorizationServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockAuthorizationServiceServerMockRecorder
}

// MockAuthorizationServiceServerMockRecorder is the mock recorder for MockAuthorizationServiceServer
type MockAuthorizationServiceServerMockRecorder struct {
	mock *MockAuthorizationServiceServer
}

// NewMockAuthorizationServiceServer creates a new mock instance
func NewMockAuthorizationServiceServer(ctrl *gomock.Controller) *MockAuthorizationServiceServer {
	mock := &MockAuthorizationServiceServer{ctrl: ctrl}
	mock.recorder = &MockAuthorizationServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAuthorizationServiceServer) EXPECT() *MockAuthorizationServiceServerMockRecorder {
	return m.recorder
}

// CreateSession mocks base method
func (m *MockAuthorizationServiceServer) CreateSession(arg0 context.Context, arg1 *UserID) (*SessionID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSession", arg0, arg1)
	ret0, _ := ret[0].(*SessionID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSession indicates an expected call of CreateSession
func (mr *MockAuthorizationServiceServerMockRecorder) CreateSession(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSession", reflect.TypeOf((*MockAuthorizationServiceServer)(nil).CreateSession), arg0, arg1)
}

// GetIDBySession mocks base method
func (m *MockAuthorizationServiceServer) GetIDBySession(arg0 context.Context, arg1 *SessionID) (*UserID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIDBySession", arg0, arg1)
	ret0, _ := ret[0].(*UserID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIDBySession indicates an expected call of GetIDBySession
func (mr *MockAuthorizationServiceServerMockRecorder) GetIDBySession(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIDBySession", reflect.TypeOf((*MockAuthorizationServiceServer)(nil).GetIDBySession), arg0, arg1)
}

// DeleteSession mocks base method
func (m *MockAuthorizationServiceServer) DeleteSession(arg0 context.Context, arg1 *SessionID) (*Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSession", arg0, arg1)
	ret0, _ := ret[0].(*Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSession indicates an expected call of DeleteSession
func (mr *MockAuthorizationServiceServerMockRecorder) DeleteSession(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSession", reflect.TypeOf((*MockAuthorizationServiceServer)(nil).DeleteSession), arg0, arg1)
}

// CreateCsrfToken mocks base method
func (m *MockAuthorizationServiceServer) CreateCsrfToken(arg0 context.Context, arg1 *CsrfTokenInput) (*CsrfToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCsrfToken", arg0, arg1)
	ret0, _ := ret[0].(*CsrfToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCsrfToken indicates an expected call of CreateCsrfToken
func (mr *MockAuthorizationServiceServerMockRecorder) CreateCsrfToken(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCsrfToken", reflect.TypeOf((*MockAuthorizationServiceServer)(nil).CreateCsrfToken), arg0, arg1)
}

// CheckCsrfToken mocks base method
func (m *MockAuthorizationServiceServer) CheckCsrfToken(arg0 context.Context, arg1 *CsrfTokenCheck) (*CheckResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckCsrfToken", arg0, arg1)
	ret0, _ := ret[0].(*CheckResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckCsrfToken indicates an expected call of CheckCsrfToken
func (mr *MockAuthorizationServiceServerMockRecorder) CheckCsrfToken(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckCsrfToken", reflect.TypeOf((*MockAuthorizationServiceServer)(nil).CheckCsrfToken), arg0, arg1)
}
