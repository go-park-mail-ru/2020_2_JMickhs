// Code generated by MockGen. DO NOT EDIT.
// Source: usecase.go

// Package recommend_mock is a generated GoMock package.
package recommend_mock

import (
	recommModels "github.com/go-park-mail-ru/2020_2_JMickhs/main/internal/app/recommendation/models"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockUsecase is a mock of Usecase interface
type MockUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockUsecaseMockRecorder
}

// MockUsecaseMockRecorder is the mock recorder for MockUsecase
type MockUsecaseMockRecorder struct {
	mock *MockUsecase
}

// NewMockUsecase creates a new mock instance
func NewMockUsecase(ctrl *gomock.Controller) *MockUsecase {
	mock := &MockUsecase{ctrl: ctrl}
	mock.recorder = &MockUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUsecase) EXPECT() *MockUsecaseMockRecorder {
	return m.recorder
}

// GetHotelsRecommendations mocks base method
func (m *MockUsecase) GetHotelsRecommendations(UserID int) ([]recommModels.HotelRecommend, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHotelsRecommendations", UserID)
	ret0, _ := ret[0].([]recommModels.HotelRecommend)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHotelsRecommendations indicates an expected call of GetHotelsRecommendations
func (mr *MockUsecaseMockRecorder) GetHotelsRecommendations(UserID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHotelsRecommendations", reflect.TypeOf((*MockUsecase)(nil).GetHotelsRecommendations), UserID)
}

// BuildMatrix mocks base method
func (m *MockUsecase) BuildMatrix(UserID int, rows []recommModels.RecommendMatrixRow) map[float64]map[float64]float64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuildMatrix", UserID, rows)
	ret0, _ := ret[0].(map[float64]map[float64]float64)
	return ret0
}

// BuildMatrix indicates an expected call of BuildMatrix
func (mr *MockUsecaseMockRecorder) BuildMatrix(UserID, rows interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildMatrix", reflect.TypeOf((*MockUsecase)(nil).BuildMatrix), UserID, rows)
}

// GetBestRecommendations mocks base method
func (m *MockUsecase) GetBestRecommendations(UserID int, matrix map[float64]map[float64]float64) []int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBestRecommendations", UserID, matrix)
	ret0, _ := ret[0].([]int64)
	return ret0
}

// GetBestRecommendations indicates an expected call of GetBestRecommendations
func (mr *MockUsecaseMockRecorder) GetBestRecommendations(UserID, matrix interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBestRecommendations", reflect.TypeOf((*MockUsecase)(nil).GetBestRecommendations), UserID, matrix)
}

// AddInSearchHistory mocks base method
func (m *MockUsecase) AddInSearchHistory(UserID int, pattern string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddInSearchHistory", UserID, pattern)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddInSearchHistory indicates an expected call of AddInSearchHistory
func (mr *MockUsecaseMockRecorder) AddInSearchHistory(UserID, pattern interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddInSearchHistory", reflect.TypeOf((*MockUsecase)(nil).AddInSearchHistory), UserID, pattern)
}

// AddHistoryHotelsToCollaborative mocks base method
func (m *MockUsecase) AddHistoryHotelsToCollaborative(UserID int, hotelIDs []int64) ([]recommModels.HotelRecommend, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddHistoryHotelsToCollaborative", UserID, hotelIDs)
	ret0, _ := ret[0].([]recommModels.HotelRecommend)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddHistoryHotelsToCollaborative indicates an expected call of AddHistoryHotelsToCollaborative
func (mr *MockUsecaseMockRecorder) AddHistoryHotelsToCollaborative(UserID, hotelIDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddHistoryHotelsToCollaborative", reflect.TypeOf((*MockUsecase)(nil).AddHistoryHotelsToCollaborative), UserID, hotelIDs)
}
