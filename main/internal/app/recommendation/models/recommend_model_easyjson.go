// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package recommModels

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonD36dd2faDecodeGithubComGoParkMailRu20202JMickhsMainInternalAppRecommendationModels(in *jlexer.Lexer, out *Recommendation) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "UserID":
			out.UserID = int(in.Int())
		case "HotelIDs":
			if in.IsNull() {
				in.Skip()
				out.HotelIDs = nil
			} else {
				in.Delim('[')
				if out.HotelIDs == nil {
					if !in.IsDelim(']') {
						out.HotelIDs = make([]int64, 0, 8)
					} else {
						out.HotelIDs = []int64{}
					}
				} else {
					out.HotelIDs = (out.HotelIDs)[:0]
				}
				for !in.IsDelim(']') {
					var v1 int64
					v1 = int64(in.Int64())
					out.HotelIDs = append(out.HotelIDs, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "Time":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Time).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD36dd2faEncodeGithubComGoParkMailRu20202JMickhsMainInternalAppRecommendationModels(out *jwriter.Writer, in Recommendation) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"UserID\":"
		out.RawString(prefix[1:])
		out.Int(int(in.UserID))
	}
	{
		const prefix string = ",\"HotelIDs\":"
		out.RawString(prefix)
		if in.HotelIDs == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.HotelIDs {
				if v2 > 0 {
					out.RawByte(',')
				}
				out.Int64(int64(v3))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"Time\":"
		out.RawString(prefix)
		out.Raw((in.Time).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Recommendation) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD36dd2faEncodeGithubComGoParkMailRu20202JMickhsMainInternalAppRecommendationModels(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Recommendation) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD36dd2faEncodeGithubComGoParkMailRu20202JMickhsMainInternalAppRecommendationModels(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Recommendation) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD36dd2faDecodeGithubComGoParkMailRu20202JMickhsMainInternalAppRecommendationModels(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Recommendation) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD36dd2faDecodeGithubComGoParkMailRu20202JMickhsMainInternalAppRecommendationModels(l, v)
}
func easyjsonD36dd2faDecodeGithubComGoParkMailRu20202JMickhsMainInternalAppRecommendationModels1(in *jlexer.Lexer, out *RecommendMatrixRow) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "UserID":
			out.UserID = float64(in.Float64())
		case "RatingID":
			out.RatingID = float64(in.Float64())
		case "HotelID":
			out.HotelID = float64(in.Float64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD36dd2faEncodeGithubComGoParkMailRu20202JMickhsMainInternalAppRecommendationModels1(out *jwriter.Writer, in RecommendMatrixRow) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"UserID\":"
		out.RawString(prefix[1:])
		out.Float64(float64(in.UserID))
	}
	{
		const prefix string = ",\"RatingID\":"
		out.RawString(prefix)
		out.Float64(float64(in.RatingID))
	}
	{
		const prefix string = ",\"HotelID\":"
		out.RawString(prefix)
		out.Float64(float64(in.HotelID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RecommendMatrixRow) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD36dd2faEncodeGithubComGoParkMailRu20202JMickhsMainInternalAppRecommendationModels1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RecommendMatrixRow) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD36dd2faEncodeGithubComGoParkMailRu20202JMickhsMainInternalAppRecommendationModels1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RecommendMatrixRow) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD36dd2faDecodeGithubComGoParkMailRu20202JMickhsMainInternalAppRecommendationModels1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RecommendMatrixRow) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD36dd2faDecodeGithubComGoParkMailRu20202JMickhsMainInternalAppRecommendationModels1(l, v)
}
func easyjsonD36dd2faDecodeGithubComGoParkMailRu20202JMickhsMainInternalAppRecommendationModels2(in *jlexer.Lexer, out *Match) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "UserID":
			out.UserID = int(in.Int())
		case "Coefficient":
			out.Coefficient = float64(in.Float64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD36dd2faEncodeGithubComGoParkMailRu20202JMickhsMainInternalAppRecommendationModels2(out *jwriter.Writer, in Match) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"UserID\":"
		out.RawString(prefix[1:])
		out.Int(int(in.UserID))
	}
	{
		const prefix string = ",\"Coefficient\":"
		out.RawString(prefix)
		out.Float64(float64(in.Coefficient))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Match) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD36dd2faEncodeGithubComGoParkMailRu20202JMickhsMainInternalAppRecommendationModels2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Match) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD36dd2faEncodeGithubComGoParkMailRu20202JMickhsMainInternalAppRecommendationModels2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Match) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD36dd2faDecodeGithubComGoParkMailRu20202JMickhsMainInternalAppRecommendationModels2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Match) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD36dd2faDecodeGithubComGoParkMailRu20202JMickhsMainInternalAppRecommendationModels2(l, v)
}
func easyjsonD36dd2faDecodeGithubComGoParkMailRu20202JMickhsMainInternalAppRecommendationModels3(in *jlexer.Lexer, out *Hotels) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "hotels":
			if in.IsNull() {
				in.Skip()
				out.Hotels = nil
			} else {
				in.Delim('[')
				if out.Hotels == nil {
					if !in.IsDelim(']') {
						out.Hotels = make([]HotelRecommend, 0, 0)
					} else {
						out.Hotels = []HotelRecommend{}
					}
				} else {
					out.Hotels = (out.Hotels)[:0]
				}
				for !in.IsDelim(']') {
					var v4 HotelRecommend
					(v4).UnmarshalEasyJSON(in)
					out.Hotels = append(out.Hotels, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD36dd2faEncodeGithubComGoParkMailRu20202JMickhsMainInternalAppRecommendationModels3(out *jwriter.Writer, in Hotels) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"hotels\":"
		out.RawString(prefix[1:])
		if in.Hotels == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.Hotels {
				if v5 > 0 {
					out.RawByte(',')
				}
				(v6).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Hotels) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD36dd2faEncodeGithubComGoParkMailRu20202JMickhsMainInternalAppRecommendationModels3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Hotels) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD36dd2faEncodeGithubComGoParkMailRu20202JMickhsMainInternalAppRecommendationModels3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Hotels) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD36dd2faDecodeGithubComGoParkMailRu20202JMickhsMainInternalAppRecommendationModels3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Hotels) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD36dd2faDecodeGithubComGoParkMailRu20202JMickhsMainInternalAppRecommendationModels3(l, v)
}
func easyjsonD36dd2faDecodeGithubComGoParkMailRu20202JMickhsMainInternalAppRecommendationModels4(in *jlexer.Lexer, out *HotelRecommend) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "hotel_id":
			out.HotelID = int(in.Int())
		case "name":
			out.Name = string(in.String())
		case "image":
			out.Image = string(in.String())
		case "location":
			out.Location = string(in.String())
		case "rating":
			out.Rating = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD36dd2faEncodeGithubComGoParkMailRu20202JMickhsMainInternalAppRecommendationModels4(out *jwriter.Writer, in HotelRecommend) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"hotel_id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.HotelID))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"image\":"
		out.RawString(prefix)
		out.String(string(in.Image))
	}
	{
		const prefix string = ",\"location\":"
		out.RawString(prefix)
		out.String(string(in.Location))
	}
	{
		const prefix string = ",\"rating\":"
		out.RawString(prefix)
		out.String(string(in.Rating))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v HotelRecommend) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD36dd2faEncodeGithubComGoParkMailRu20202JMickhsMainInternalAppRecommendationModels4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v HotelRecommend) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD36dd2faEncodeGithubComGoParkMailRu20202JMickhsMainInternalAppRecommendationModels4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *HotelRecommend) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD36dd2faDecodeGithubComGoParkMailRu20202JMickhsMainInternalAppRecommendationModels4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *HotelRecommend) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD36dd2faDecodeGithubComGoParkMailRu20202JMickhsMainInternalAppRecommendationModels4(l, v)
}
func easyjsonD36dd2faDecodeGithubComGoParkMailRu20202JMickhsMainInternalAppRecommendationModels5(in *jlexer.Lexer, out *BestProduct) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "HotelID":
			out.HotelID = int(in.Int())
		case "Coefficient":
			out.Coefficient = float64(in.Float64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD36dd2faEncodeGithubComGoParkMailRu20202JMickhsMainInternalAppRecommendationModels5(out *jwriter.Writer, in BestProduct) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"HotelID\":"
		out.RawString(prefix[1:])
		out.Int(int(in.HotelID))
	}
	{
		const prefix string = ",\"Coefficient\":"
		out.RawString(prefix)
		out.Float64(float64(in.Coefficient))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BestProduct) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD36dd2faEncodeGithubComGoParkMailRu20202JMickhsMainInternalAppRecommendationModels5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BestProduct) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD36dd2faEncodeGithubComGoParkMailRu20202JMickhsMainInternalAppRecommendationModels5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BestProduct) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD36dd2faDecodeGithubComGoParkMailRu20202JMickhsMainInternalAppRecommendationModels5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BestProduct) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD36dd2faDecodeGithubComGoParkMailRu20202JMickhsMainInternalAppRecommendationModels5(l, v)
}
