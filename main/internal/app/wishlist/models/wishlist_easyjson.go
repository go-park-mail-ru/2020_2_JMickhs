// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package wishlistmodel

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson72640071DecodeGithubComGoParkMailRu20202JMickhsMainInternalAppWishlistModels(in *jlexer.Lexer, out *WishlistHotel) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "wishlist_id":
			out.WishlistID = int(in.Int())
		case "hotel_id":
			out.HotelID = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson72640071EncodeGithubComGoParkMailRu20202JMickhsMainInternalAppWishlistModels(out *jwriter.Writer, in WishlistHotel) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"wishlist_id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.WishlistID))
	}
	{
		const prefix string = ",\"hotel_id\":"
		out.RawString(prefix)
		out.Int(int(in.HotelID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v WishlistHotel) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson72640071EncodeGithubComGoParkMailRu20202JMickhsMainInternalAppWishlistModels(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v WishlistHotel) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson72640071EncodeGithubComGoParkMailRu20202JMickhsMainInternalAppWishlistModels(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *WishlistHotel) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson72640071DecodeGithubComGoParkMailRu20202JMickhsMainInternalAppWishlistModels(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *WishlistHotel) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson72640071DecodeGithubComGoParkMailRu20202JMickhsMainInternalAppWishlistModels(l, v)
}
func easyjson72640071DecodeGithubComGoParkMailRu20202JMickhsMainInternalAppWishlistModels1(in *jlexer.Lexer, out *Wishlist) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "wishlist_id":
			out.WishlistID = int(in.Int())
		case "name":
			out.Name = string(in.String())
		case "user_id":
			out.UserID = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson72640071EncodeGithubComGoParkMailRu20202JMickhsMainInternalAppWishlistModels1(out *jwriter.Writer, in Wishlist) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"wishlist_id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.WishlistID))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	if in.UserID != 0 {
		const prefix string = ",\"user_id\":"
		out.RawString(prefix)
		out.Int(int(in.UserID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Wishlist) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson72640071EncodeGithubComGoParkMailRu20202JMickhsMainInternalAppWishlistModels1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Wishlist) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson72640071EncodeGithubComGoParkMailRu20202JMickhsMainInternalAppWishlistModels1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Wishlist) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson72640071DecodeGithubComGoParkMailRu20202JMickhsMainInternalAppWishlistModels1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Wishlist) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson72640071DecodeGithubComGoParkMailRu20202JMickhsMainInternalAppWishlistModels1(l, v)
}
func easyjson72640071DecodeGithubComGoParkMailRu20202JMickhsMainInternalAppWishlistModels2(in *jlexer.Lexer, out *UserWishLists) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "wishlists":
			if in.IsNull() {
				in.Skip()
				out.Wishlists = nil
			} else {
				in.Delim('[')
				if out.Wishlists == nil {
					if !in.IsDelim(']') {
						out.Wishlists = make([]Wishlist, 0, 2)
					} else {
						out.Wishlists = []Wishlist{}
					}
				} else {
					out.Wishlists = (out.Wishlists)[:0]
				}
				for !in.IsDelim(']') {
					var v1 Wishlist
					(v1).UnmarshalEasyJSON(in)
					out.Wishlists = append(out.Wishlists, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson72640071EncodeGithubComGoParkMailRu20202JMickhsMainInternalAppWishlistModels2(out *jwriter.Writer, in UserWishLists) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Wishlists) != 0 {
		const prefix string = ",\"wishlists\":"
		first = false
		out.RawString(prefix[1:])
		{
			out.RawByte('[')
			for v2, v3 := range in.Wishlists {
				if v2 > 0 {
					out.RawByte(',')
				}
				(v3).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UserWishLists) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson72640071EncodeGithubComGoParkMailRu20202JMickhsMainInternalAppWishlistModels2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UserWishLists) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson72640071EncodeGithubComGoParkMailRu20202JMickhsMainInternalAppWishlistModels2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UserWishLists) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson72640071DecodeGithubComGoParkMailRu20202JMickhsMainInternalAppWishlistModels2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UserWishLists) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson72640071DecodeGithubComGoParkMailRu20202JMickhsMainInternalAppWishlistModels2(l, v)
}
func easyjson72640071DecodeGithubComGoParkMailRu20202JMickhsMainInternalAppWishlistModels3(in *jlexer.Lexer, out *HotelWishlistRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "hotel_id":
			out.HotelID = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson72640071EncodeGithubComGoParkMailRu20202JMickhsMainInternalAppWishlistModels3(out *jwriter.Writer, in HotelWishlistRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"hotel_id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.HotelID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v HotelWishlistRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson72640071EncodeGithubComGoParkMailRu20202JMickhsMainInternalAppWishlistModels3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v HotelWishlistRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson72640071EncodeGithubComGoParkMailRu20202JMickhsMainInternalAppWishlistModels3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *HotelWishlistRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson72640071DecodeGithubComGoParkMailRu20202JMickhsMainInternalAppWishlistModels3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *HotelWishlistRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson72640071DecodeGithubComGoParkMailRu20202JMickhsMainInternalAppWishlistModels3(l, v)
}
