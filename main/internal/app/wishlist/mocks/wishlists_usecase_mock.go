// Code generated by MockGen. DO NOT EDIT.
// Source: usecase.go

// Package wishlists_mock is a generated GoMock package.
package wishlists_mock

import (
	wishlistmodel "github.com/go-park-mail-ru/2020_2_JMickhs/main/internal/app/wishlist/models"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockUsecase is a mock of Usecase interface
type MockUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockUsecaseMockRecorder
}

// MockUsecaseMockRecorder is the mock recorder for MockUsecase
type MockUsecaseMockRecorder struct {
	mock *MockUsecase
}

// NewMockUsecase creates a new mock instance
func NewMockUsecase(ctrl *gomock.Controller) *MockUsecase {
	mock := &MockUsecase{ctrl: ctrl}
	mock.recorder = &MockUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUsecase) EXPECT() *MockUsecaseMockRecorder {
	return m.recorder
}

// GetWishlistMeta mocks base method
func (m *MockUsecase) GetWishlistMeta(userID, wishlistID int) ([]wishlistmodel.WishlistHotel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWishlistMeta", userID, wishlistID)
	ret0, _ := ret[0].([]wishlistmodel.WishlistHotel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWishlistMeta indicates an expected call of GetWishlistMeta
func (mr *MockUsecaseMockRecorder) GetWishlistMeta(userID, wishlistID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWishlistMeta", reflect.TypeOf((*MockUsecase)(nil).GetWishlistMeta), userID, wishlistID)
}

// CreateWishlist mocks base method
func (m *MockUsecase) CreateWishlist(wishlist wishlistmodel.Wishlist) (wishlistmodel.Wishlist, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWishlist", wishlist)
	ret0, _ := ret[0].(wishlistmodel.Wishlist)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWishlist indicates an expected call of CreateWishlist
func (mr *MockUsecaseMockRecorder) CreateWishlist(wishlist interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWishlist", reflect.TypeOf((*MockUsecase)(nil).CreateWishlist), wishlist)
}

// DeleteWishlist mocks base method
func (m *MockUsecase) DeleteWishlist(userID, wishlistID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteWishlist", userID, wishlistID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteWishlist indicates an expected call of DeleteWishlist
func (mr *MockUsecaseMockRecorder) DeleteWishlist(userID, wishlistID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWishlist", reflect.TypeOf((*MockUsecase)(nil).DeleteWishlist), userID, wishlistID)
}

// AddHotel mocks base method
func (m *MockUsecase) AddHotel(userID, hotelID, wishlistID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddHotel", userID, hotelID, wishlistID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddHotel indicates an expected call of AddHotel
func (mr *MockUsecaseMockRecorder) AddHotel(userID, hotelID, wishlistID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddHotel", reflect.TypeOf((*MockUsecase)(nil).AddHotel), userID, hotelID, wishlistID)
}

// DeleteHotel mocks base method
func (m *MockUsecase) DeleteHotel(userID, hotelID, wishlistID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteHotel", userID, hotelID, wishlistID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteHotel indicates an expected call of DeleteHotel
func (mr *MockUsecaseMockRecorder) DeleteHotel(userID, hotelID, wishlistID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteHotel", reflect.TypeOf((*MockUsecase)(nil).DeleteHotel), userID, hotelID, wishlistID)
}

// GetUserWishlists mocks base method
func (m *MockUsecase) GetUserWishlists(userID int) (wishlistmodel.UserWishLists, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserWishlists", userID)
	ret0, _ := ret[0].(wishlistmodel.UserWishLists)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserWishlists indicates an expected call of GetUserWishlists
func (mr *MockUsecaseMockRecorder) GetUserWishlists(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserWishlists", reflect.TypeOf((*MockUsecase)(nil).GetUserWishlists), userID)
}

// CheckHotelInWishlists mocks base method
func (m *MockUsecase) CheckHotelInWishlists(userID, hotelID int) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckHotelInWishlists", userID, hotelID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckHotelInWishlists indicates an expected call of CheckHotelInWishlists
func (mr *MockUsecaseMockRecorder) CheckHotelInWishlists(userID, hotelID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckHotelInWishlists", reflect.TypeOf((*MockUsecase)(nil).CheckHotelInWishlists), userID, hotelID)
}

// WishListsByHotel mocks base method
func (m *MockUsecase) WishListsByHotel(userID, hotelID int) (wishlistmodel.UserWishLists, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WishListsByHotel", userID, hotelID)
	ret0, _ := ret[0].(wishlistmodel.UserWishLists)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WishListsByHotel indicates an expected call of WishListsByHotel
func (mr *MockUsecaseMockRecorder) WishListsByHotel(userID, hotelID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WishListsByHotel", reflect.TypeOf((*MockUsecase)(nil).WishListsByHotel), userID, hotelID)
}
