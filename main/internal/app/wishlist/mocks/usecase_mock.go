// Code generated by MockGen. DO NOT EDIT.
// Source: usecase.go

// Package mock_wishlist is a generated GoMock package.
package mock_wishlist

import (
	models "github.com/go-park-mail-ru/2020_2_JMickhs/main/internal/app/wishlist/models"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockUsecase is a mock of Usecase interface
type MockUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockUsecaseMockRecorder
}

// MockUsecaseMockRecorder is the mock recorder for MockUsecase
type MockUsecaseMockRecorder struct {
	mock *MockUsecase
}

// NewMockUsecase creates a new mock instance
func NewMockUsecase(ctrl *gomock.Controller) *MockUsecase {
	mock := &MockUsecase{ctrl: ctrl}
	mock.recorder = &MockUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUsecase) EXPECT() *MockUsecaseMockRecorder {
	return m.recorder
}

// GetWishlistMeta mocks base method
func (m *MockUsecase) GetWishlistMeta(wishlistID int) ([]models.WishlisstHotel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWishlistMeta", wishlistID)
	ret0, _ := ret[0].([]models.WishlisstHotel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWishlistMeta indicates an expected call of GetWishlistMeta
func (mr *MockUsecaseMockRecorder) GetWishlistMeta(wishlistID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWishlistMeta", reflect.TypeOf((*MockUsecase)(nil).GetWishlistMeta), wishlistID)
}

// CreateWishlist mocks base method
func (m *MockUsecase) CreateWishlist(wishlist models.Wishlist) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWishlist", wishlist)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateWishlist indicates an expected call of CreateWishlist
func (mr *MockUsecaseMockRecorder) CreateWishlist(wishlist interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWishlist", reflect.TypeOf((*MockUsecase)(nil).CreateWishlist), wishlist)
}

// DeleteWishlist mocks base method
func (m *MockUsecase) DeleteWishlist(wishlistID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteWishlist", wishlistID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteWishlist indicates an expected call of DeleteWishlist
func (mr *MockUsecaseMockRecorder) DeleteWishlist(wishlistID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWishlist", reflect.TypeOf((*MockUsecase)(nil).DeleteWishlist), wishlistID)
}

// AddHotel mocks base method
func (m *MockUsecase) AddHotel(hotelID, wishlistID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddHotel", hotelID, wishlistID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddHotel indicates an expected call of AddHotel
func (mr *MockUsecaseMockRecorder) AddHotel(hotelID, wishlistID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddHotel", reflect.TypeOf((*MockUsecase)(nil).AddHotel), hotelID, wishlistID)
}

// DeleteHotel mocks base method
func (m *MockUsecase) DeleteHotel(hotelID, wishlistID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteHotel", hotelID, wishlistID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteHotel indicates an expected call of DeleteHotel
func (mr *MockUsecaseMockRecorder) DeleteHotel(hotelID, wishlistID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteHotel", reflect.TypeOf((*MockUsecase)(nil).DeleteHotel), hotelID, wishlistID)
}
