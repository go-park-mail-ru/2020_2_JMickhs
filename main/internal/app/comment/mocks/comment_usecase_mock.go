// Code generated by MockGen. DO NOT EDIT.
// Source: usecase.go

// Package comment_mock is a generated GoMock package.
package comment_mock

import (
	commModel "github.com/go-park-mail-ru/2020_2_JMickhs/main/internal/app/comment/models"
	gomock "github.com/golang/mock/gomock"
	multipart "mime/multipart"
	reflect "reflect"
)

// MockUsecase is a mock of Usecase interface
type MockUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockUsecaseMockRecorder
}

// MockUsecaseMockRecorder is the mock recorder for MockUsecase
type MockUsecaseMockRecorder struct {
	mock *MockUsecase
}

// NewMockUsecase creates a new mock instance
func NewMockUsecase(ctrl *gomock.Controller) *MockUsecase {
	mock := &MockUsecase{ctrl: ctrl}
	mock.recorder = &MockUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUsecase) EXPECT() *MockUsecaseMockRecorder {
	return m.recorder
}

// GetComments mocks base method
func (m *MockUsecase) GetComments(hotelID, limit, offset string, user_id int) (int, commModel.Comments, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetComments", hotelID, limit, offset, user_id)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(commModel.Comments)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetComments indicates an expected call of GetComments
func (mr *MockUsecaseMockRecorder) GetComments(hotelID, limit, offset, user_id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetComments", reflect.TypeOf((*MockUsecase)(nil).GetComments), hotelID, limit, offset, user_id)
}

// AddComment mocks base method
func (m *MockUsecase) AddComment(comment commModel.Comment) (commModel.NewRate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddComment", comment)
	ret0, _ := ret[0].(commModel.NewRate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddComment indicates an expected call of AddComment
func (mr *MockUsecaseMockRecorder) AddComment(comment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddComment", reflect.TypeOf((*MockUsecase)(nil).AddComment), comment)
}

// DeleteComment mocks base method
func (m *MockUsecase) DeleteComment(ID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteComment", ID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteComment indicates an expected call of DeleteComment
func (mr *MockUsecaseMockRecorder) DeleteComment(ID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteComment", reflect.TypeOf((*MockUsecase)(nil).DeleteComment), ID)
}

// DeletePhotos mocks base method
func (m *MockUsecase) DeletePhotos(comment commModel.Comment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePhotos", comment)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePhotos indicates an expected call of DeletePhotos
func (mr *MockUsecaseMockRecorder) DeletePhotos(comment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePhotos", reflect.TypeOf((*MockUsecase)(nil).DeletePhotos), comment)
}

// UpdateComment mocks base method
func (m *MockUsecase) UpdateComment(comment commModel.Comment) (commModel.NewRate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateComment", comment)
	ret0, _ := ret[0].(commModel.NewRate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateComment indicates an expected call of UpdateComment
func (mr *MockUsecaseMockRecorder) UpdateComment(comment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateComment", reflect.TypeOf((*MockUsecase)(nil).UpdateComment), comment)
}

// UpdateRating mocks base method
func (m *MockUsecase) UpdateRating(prevRate commModel.PrevRate) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRating", prevRate)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRating indicates an expected call of UpdateRating
func (mr *MockUsecaseMockRecorder) UpdateRating(prevRate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRating", reflect.TypeOf((*MockUsecase)(nil).UpdateRating), prevRate)
}

// AddRating mocks base method
func (m *MockUsecase) AddRating(comment commModel.Comment) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddRating", comment)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddRating indicates an expected call of AddRating
func (mr *MockUsecaseMockRecorder) AddRating(comment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRating", reflect.TypeOf((*MockUsecase)(nil).AddRating), comment)
}

// UploadPhoto mocks base method
func (m *MockUsecase) UploadPhoto(comment *commModel.Comment, file multipart.File, contentType string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadPhoto", comment, file, contentType)
	ret0, _ := ret[0].(error)
	return ret0
}

// UploadPhoto indicates an expected call of UploadPhoto
func (mr *MockUsecaseMockRecorder) UploadPhoto(comment, file, contentType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadPhoto", reflect.TypeOf((*MockUsecase)(nil).UploadPhoto), comment, file, contentType)
}

// GetPhotos mocks base method
func (m *MockUsecase) GetPhotos(hotelID string) (commModel.Photos, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPhotos", hotelID)
	ret0, _ := ret[0].(commModel.Photos)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPhotos indicates an expected call of GetPhotos
func (mr *MockUsecaseMockRecorder) GetPhotos(hotelID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPhotos", reflect.TypeOf((*MockUsecase)(nil).GetPhotos), hotelID)
}

// CheckUserComment mocks base method
func (m *MockUsecase) CheckUserComment(comment commModel.Comment) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckUserComment", comment)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckUserComment indicates an expected call of CheckUserComment
func (mr *MockUsecaseMockRecorder) CheckUserComment(comment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckUserComment", reflect.TypeOf((*MockUsecase)(nil).CheckUserComment), comment)
}
