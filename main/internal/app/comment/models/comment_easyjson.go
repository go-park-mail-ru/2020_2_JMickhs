// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package commModel

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonE9abebc9DecodeGithubComGoParkMailRu20202JMickhsMainInternalAppCommentModels(in *jlexer.Lexer, out *RateInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "RatesCount":
			out.RatesCount = int(in.Int())
		case "CurrRating":
			out.CurrRating = float64(in.Float64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE9abebc9EncodeGithubComGoParkMailRu20202JMickhsMainInternalAppCommentModels(out *jwriter.Writer, in RateInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"RatesCount\":"
		out.RawString(prefix[1:])
		out.Int(int(in.RatesCount))
	}
	{
		const prefix string = ",\"CurrRating\":"
		out.RawString(prefix)
		out.Float64(float64(in.CurrRating))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RateInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE9abebc9EncodeGithubComGoParkMailRu20202JMickhsMainInternalAppCommentModels(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RateInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE9abebc9EncodeGithubComGoParkMailRu20202JMickhsMainInternalAppCommentModels(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RateInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE9abebc9DecodeGithubComGoParkMailRu20202JMickhsMainInternalAppCommentModels(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RateInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE9abebc9DecodeGithubComGoParkMailRu20202JMickhsMainInternalAppCommentModels(l, v)
}
func easyjsonE9abebc9DecodeGithubComGoParkMailRu20202JMickhsMainInternalAppCommentModels1(in *jlexer.Lexer, out *PrevRate) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "prev_rate":
			out.Rate = int(in.Int())
		case "comment":
			(out.Comment).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE9abebc9EncodeGithubComGoParkMailRu20202JMickhsMainInternalAppCommentModels1(out *jwriter.Writer, in PrevRate) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"prev_rate\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Rate))
	}
	{
		const prefix string = ",\"comment\":"
		out.RawString(prefix)
		(in.Comment).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PrevRate) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE9abebc9EncodeGithubComGoParkMailRu20202JMickhsMainInternalAppCommentModels1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PrevRate) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE9abebc9EncodeGithubComGoParkMailRu20202JMickhsMainInternalAppCommentModels1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PrevRate) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE9abebc9DecodeGithubComGoParkMailRu20202JMickhsMainInternalAppCommentModels1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PrevRate) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE9abebc9DecodeGithubComGoParkMailRu20202JMickhsMainInternalAppCommentModels1(l, v)
}
func easyjsonE9abebc9DecodeGithubComGoParkMailRu20202JMickhsMainInternalAppCommentModels2(in *jlexer.Lexer, out *Photos) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "photos":
			if in.IsNull() {
				in.Skip()
				out.Photos = nil
			} else {
				in.Delim('[')
				if out.Photos == nil {
					if !in.IsDelim(']') {
						out.Photos = make([]string, 0, 4)
					} else {
						out.Photos = []string{}
					}
				} else {
					out.Photos = (out.Photos)[:0]
				}
				for !in.IsDelim(']') {
					var v1 string
					v1 = string(in.String())
					out.Photos = append(out.Photos, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE9abebc9EncodeGithubComGoParkMailRu20202JMickhsMainInternalAppCommentModels2(out *jwriter.Writer, in Photos) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"photos\":"
		out.RawString(prefix[1:])
		if in.Photos == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Photos {
				if v2 > 0 {
					out.RawByte(',')
				}
				out.String(string(v3))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Photos) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE9abebc9EncodeGithubComGoParkMailRu20202JMickhsMainInternalAppCommentModels2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Photos) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE9abebc9EncodeGithubComGoParkMailRu20202JMickhsMainInternalAppCommentModels2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Photos) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE9abebc9DecodeGithubComGoParkMailRu20202JMickhsMainInternalAppCommentModels2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Photos) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE9abebc9DecodeGithubComGoParkMailRu20202JMickhsMainInternalAppCommentModels2(l, v)
}
func easyjsonE9abebc9DecodeGithubComGoParkMailRu20202JMickhsMainInternalAppCommentModels3(in *jlexer.Lexer, out *NewRate) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "new_rate":
			out.Rate = float64(in.Float64())
		case "comment":
			(out.Comment).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE9abebc9EncodeGithubComGoParkMailRu20202JMickhsMainInternalAppCommentModels3(out *jwriter.Writer, in NewRate) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"new_rate\":"
		out.RawString(prefix[1:])
		out.Float64(float64(in.Rate))
	}
	{
		const prefix string = ",\"comment\":"
		out.RawString(prefix)
		(in.Comment).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v NewRate) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE9abebc9EncodeGithubComGoParkMailRu20202JMickhsMainInternalAppCommentModels3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v NewRate) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE9abebc9EncodeGithubComGoParkMailRu20202JMickhsMainInternalAppCommentModels3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *NewRate) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE9abebc9DecodeGithubComGoParkMailRu20202JMickhsMainInternalAppCommentModels3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *NewRate) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE9abebc9DecodeGithubComGoParkMailRu20202JMickhsMainInternalAppCommentModels3(l, v)
}
func easyjsonE9abebc9DecodeGithubComGoParkMailRu20202JMickhsMainInternalAppCommentModels4(in *jlexer.Lexer, out *FullCommentInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "user_id":
			out.UserID = int(in.Int())
		case "comm_id":
			out.CommID = int(in.Int())
		case "hotel_id":
			out.HotelID = int(in.Int())
		case "message":
			out.Message = string(in.String())
		case "rating":
			out.Rating = float64(in.Float64())
		case "avatar":
			out.Avatar = string(in.String())
		case "username":
			out.Username = string(in.String())
		case "time":
			out.Time = string(in.String())
		case "concat":
			if in.IsNull() {
				in.Skip()
				out.Photos = nil
			} else {
				in.Delim('[')
				if out.Photos == nil {
					if !in.IsDelim(']') {
						out.Photos = make([]string, 0, 4)
					} else {
						out.Photos = []string{}
					}
				} else {
					out.Photos = (out.Photos)[:0]
				}
				for !in.IsDelim(']') {
					var v4 string
					v4 = string(in.String())
					out.Photos = append(out.Photos, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE9abebc9EncodeGithubComGoParkMailRu20202JMickhsMainInternalAppCommentModels4(out *jwriter.Writer, in FullCommentInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"user_id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.UserID))
	}
	{
		const prefix string = ",\"comm_id\":"
		out.RawString(prefix)
		out.Int(int(in.CommID))
	}
	{
		const prefix string = ",\"hotel_id\":"
		out.RawString(prefix)
		out.Int(int(in.HotelID))
	}
	{
		const prefix string = ",\"message\":"
		out.RawString(prefix)
		out.String(string(in.Message))
	}
	{
		const prefix string = ",\"rating\":"
		out.RawString(prefix)
		out.Float64(float64(in.Rating))
	}
	{
		const prefix string = ",\"avatar\":"
		out.RawString(prefix)
		out.String(string(in.Avatar))
	}
	{
		const prefix string = ",\"username\":"
		out.RawString(prefix)
		out.String(string(in.Username))
	}
	{
		const prefix string = ",\"time\":"
		out.RawString(prefix)
		out.String(string(in.Time))
	}
	{
		const prefix string = ",\"concat\":"
		out.RawString(prefix)
		if in.Photos == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.Photos {
				if v5 > 0 {
					out.RawByte(',')
				}
				out.String(string(v6))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v FullCommentInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE9abebc9EncodeGithubComGoParkMailRu20202JMickhsMainInternalAppCommentModels4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v FullCommentInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE9abebc9EncodeGithubComGoParkMailRu20202JMickhsMainInternalAppCommentModels4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *FullCommentInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE9abebc9DecodeGithubComGoParkMailRu20202JMickhsMainInternalAppCommentModels4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *FullCommentInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE9abebc9DecodeGithubComGoParkMailRu20202JMickhsMainInternalAppCommentModels4(l, v)
}
func easyjsonE9abebc9DecodeGithubComGoParkMailRu20202JMickhsMainInternalAppCommentModels5(in *jlexer.Lexer, out *Comments) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "comments":
			if in.IsNull() {
				in.Skip()
				out.Comments = nil
			} else {
				in.Delim('[')
				if out.Comments == nil {
					if !in.IsDelim(']') {
						out.Comments = make([]FullCommentInfo, 0, 0)
					} else {
						out.Comments = []FullCommentInfo{}
					}
				} else {
					out.Comments = (out.Comments)[:0]
				}
				for !in.IsDelim(']') {
					var v7 FullCommentInfo
					(v7).UnmarshalEasyJSON(in)
					out.Comments = append(out.Comments, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "pag_info":
			(out.Info).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE9abebc9EncodeGithubComGoParkMailRu20202JMickhsMainInternalAppCommentModels5(out *jwriter.Writer, in Comments) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"comments\":"
		out.RawString(prefix[1:])
		if in.Comments == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v8, v9 := range in.Comments {
				if v8 > 0 {
					out.RawByte(',')
				}
				(v9).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"pag_info\":"
		out.RawString(prefix)
		(in.Info).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Comments) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE9abebc9EncodeGithubComGoParkMailRu20202JMickhsMainInternalAppCommentModels5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Comments) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE9abebc9EncodeGithubComGoParkMailRu20202JMickhsMainInternalAppCommentModels5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Comments) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE9abebc9DecodeGithubComGoParkMailRu20202JMickhsMainInternalAppCommentModels5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Comments) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE9abebc9DecodeGithubComGoParkMailRu20202JMickhsMainInternalAppCommentModels5(l, v)
}
func easyjsonE9abebc9DecodeGithubComGoParkMailRu20202JMickhsMainInternalAppCommentModels6(in *jlexer.Lexer, out *Comment) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "user_id":
			out.UserID = int(in.Int())
		case "hotel_id":
			out.HotelID = int(in.Int())
		case "comm_id":
			out.CommID = int(in.Int())
		case "message":
			out.Message = string(in.String())
		case "rating":
			out.Rate = float64(in.Float64())
		case "time":
			out.Time = string(in.String())
		case "photos":
			if in.IsNull() {
				in.Skip()
				out.Photos = nil
			} else {
				in.Delim('[')
				if out.Photos == nil {
					if !in.IsDelim(']') {
						out.Photos = make([]string, 0, 4)
					} else {
						out.Photos = []string{}
					}
				} else {
					out.Photos = (out.Photos)[:0]
				}
				for !in.IsDelim(']') {
					var v10 string
					v10 = string(in.String())
					out.Photos = append(out.Photos, v10)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE9abebc9EncodeGithubComGoParkMailRu20202JMickhsMainInternalAppCommentModels6(out *jwriter.Writer, in Comment) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"user_id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.UserID))
	}
	{
		const prefix string = ",\"hotel_id\":"
		out.RawString(prefix)
		out.Int(int(in.HotelID))
	}
	{
		const prefix string = ",\"comm_id\":"
		out.RawString(prefix)
		out.Int(int(in.CommID))
	}
	{
		const prefix string = ",\"message\":"
		out.RawString(prefix)
		out.String(string(in.Message))
	}
	{
		const prefix string = ",\"rating\":"
		out.RawString(prefix)
		out.Float64(float64(in.Rate))
	}
	{
		const prefix string = ",\"time\":"
		out.RawString(prefix)
		out.String(string(in.Time))
	}
	{
		const prefix string = ",\"photos\":"
		out.RawString(prefix)
		if in.Photos == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v11, v12 := range in.Photos {
				if v11 > 0 {
					out.RawByte(',')
				}
				out.String(string(v12))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Comment) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE9abebc9EncodeGithubComGoParkMailRu20202JMickhsMainInternalAppCommentModels6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Comment) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE9abebc9EncodeGithubComGoParkMailRu20202JMickhsMainInternalAppCommentModels6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Comment) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE9abebc9DecodeGithubComGoParkMailRu20202JMickhsMainInternalAppCommentModels6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Comment) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE9abebc9DecodeGithubComGoParkMailRu20202JMickhsMainInternalAppCommentModels6(l, v)
}
