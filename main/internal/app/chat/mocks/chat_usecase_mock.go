// Code generated by MockGen. DO NOT EDIT.
// Source: usecase.go

// Package chat_mock is a generated GoMock package.
package chat_mock

import (
	chat_model "github.com/go-park-mail-ru/2020_2_JMickhs/main/internal/app/chat/models"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockUsecase is a mock of Usecase interface
type MockUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockUsecaseMockRecorder
}

// MockUsecaseMockRecorder is the mock recorder for MockUsecase
type MockUsecaseMockRecorder struct {
	mock *MockUsecase
}

// NewMockUsecase creates a new mock instance
func NewMockUsecase(ctrl *gomock.Controller) *MockUsecase {
	mock := &MockUsecase{ctrl: ctrl}
	mock.recorder = &MockUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUsecase) EXPECT() *MockUsecaseMockRecorder {
	return m.recorder
}

// AddMessageInChat mocks base method
func (m *MockUsecase) AddMessageInChat(chatID string, message chat_model.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddMessageInChat", chatID, message)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddMessageInChat indicates an expected call of AddMessageInChat
func (mr *MockUsecaseMockRecorder) AddMessageInChat(chatID, message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMessageInChat", reflect.TypeOf((*MockUsecase)(nil).AddMessageInChat), chatID, message)
}

// AddOrGetChat mocks base method
func (m *MockUsecase) AddOrGetChat(chatID string, userID int) ([]chat_model.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddOrGetChat", chatID, userID)
	ret0, _ := ret[0].([]chat_model.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddOrGetChat indicates an expected call of AddOrGetChat
func (mr *MockUsecaseMockRecorder) AddOrGetChat(chatID, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddOrGetChat", reflect.TypeOf((*MockUsecase)(nil).AddOrGetChat), chatID, userID)
}

// GetChatID mocks base method
func (m *MockUsecase) GetChatID(userID int) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChatID", userID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChatID indicates an expected call of GetChatID
func (mr *MockUsecaseMockRecorder) GetChatID(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChatID", reflect.TypeOf((*MockUsecase)(nil).GetChatID), userID)
}

// GetChatHistoryByID mocks base method
func (m *MockUsecase) GetChatHistoryByID(chatID string) ([]chat_model.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChatHistoryByID", chatID)
	ret0, _ := ret[0].([]chat_model.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChatHistoryByID indicates an expected call of GetChatHistoryByID
func (mr *MockUsecaseMockRecorder) GetChatHistoryByID(chatID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChatHistoryByID", reflect.TypeOf((*MockUsecase)(nil).GetChatHistoryByID), chatID)
}
