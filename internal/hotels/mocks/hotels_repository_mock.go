// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	models "github.com/go-park-mail-ru/2020_2_JMickhs/internal/hotels/models"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockRepository is a mock of Repository interface
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// GetHotels mocks base method
func (m *MockRepository) GetHotels(StartID int) ([]models.Hotel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHotels", StartID)
	ret0, _ := ret[0].([]models.Hotel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHotels indicates an expected call of GetHotels
func (mr *MockRepositoryMockRecorder) GetHotels(StartID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHotels", reflect.TypeOf((*MockRepository)(nil).GetHotels), StartID)
}

// GetHotelByID mocks base method
func (m *MockRepository) GetHotelByID(ID int) (models.Hotel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHotelByID", ID)
	ret0, _ := ret[0].(models.Hotel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHotelByID indicates an expected call of GetHotelByID
func (mr *MockRepositoryMockRecorder) GetHotelByID(ID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHotelByID", reflect.TypeOf((*MockRepository)(nil).GetHotelByID), ID)
}

// FetchHotels mocks base method
func (m *MockRepository) FetchHotels(pattern string, data models.FilterData, limit int, nextOrPrev bool) ([]models.Hotel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchHotels", pattern, data, limit, nextOrPrev)
	ret0, _ := ret[0].([]models.Hotel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchHotels indicates an expected call of FetchHotels
func (mr *MockRepositoryMockRecorder) FetchHotels(pattern, data, limit, nextOrPrev interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchHotels", reflect.TypeOf((*MockRepository)(nil).FetchHotels), pattern, data, limit, nextOrPrev)
}
