// Code generated by MockGen. DO NOT EDIT.
// Source: usecase.go

// Package mocks is a generated GoMock package.
package mocks

import (
	models "github.com/go-park-mail-ru/2020_2_JMickhs/internal/user/models"
	gomock "github.com/golang/mock/gomock"
	multipart "mime/multipart"
	reflect "reflect"
)

// MockUsecase is a mock of Usecase interface
type MockUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockUsecaseMockRecorder
}

// MockUsecaseMockRecorder is the mock recorder for MockUsecase
type MockUsecaseMockRecorder struct {
	mock *MockUsecase
}

// NewMockUsecase creates a new mock instance
func NewMockUsecase(ctrl *gomock.Controller) *MockUsecase {
	mock := &MockUsecase{ctrl: ctrl}
	mock.recorder = &MockUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUsecase) EXPECT() *MockUsecaseMockRecorder {
	return m.recorder
}

// GetByUserName mocks base method
func (m *MockUsecase) GetByUserName(name string) (models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByUserName", name)
	ret0, _ := ret[0].(models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByUserName indicates an expected call of GetByUserName
func (mr *MockUsecaseMockRecorder) GetByUserName(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByUserName", reflect.TypeOf((*MockUsecase)(nil).GetByUserName), name)
}

// Add mocks base method
func (m *MockUsecase) Add(user models.User) (models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", user)
	ret0, _ := ret[0].(models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Add indicates an expected call of Add
func (mr *MockUsecaseMockRecorder) Add(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockUsecase)(nil).Add), user)
}

// GetUserByID mocks base method
func (m *MockUsecase) GetUserByID(ID int) (models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", ID)
	ret0, _ := ret[0].(models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID
func (mr *MockUsecaseMockRecorder) GetUserByID(ID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockUsecase)(nil).GetUserByID), ID)
}

// SetDefaultAvatar mocks base method
func (m *MockUsecase) SetDefaultAvatar(user *models.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetDefaultAvatar", user)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetDefaultAvatar indicates an expected call of SetDefaultAvatar
func (mr *MockUsecaseMockRecorder) SetDefaultAvatar(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDefaultAvatar", reflect.TypeOf((*MockUsecase)(nil).SetDefaultAvatar), user)
}

// UpdateUser mocks base method
func (m *MockUsecase) UpdateUser(user models.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", user)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUser indicates an expected call of UpdateUser
func (mr *MockUsecaseMockRecorder) UpdateUser(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockUsecase)(nil).UpdateUser), user)
}

// UpdateAvatar mocks base method
func (m *MockUsecase) UpdateAvatar(user models.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAvatar", user)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAvatar indicates an expected call of UpdateAvatar
func (mr *MockUsecaseMockRecorder) UpdateAvatar(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAvatar", reflect.TypeOf((*MockUsecase)(nil).UpdateAvatar), user)
}

// UpdatePassword mocks base method
func (m *MockUsecase) UpdatePassword(user models.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePassword", user)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePassword indicates an expected call of UpdatePassword
func (mr *MockUsecaseMockRecorder) UpdatePassword(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePassword", reflect.TypeOf((*MockUsecase)(nil).UpdatePassword), user)
}

// UploadAvatar mocks base method
func (m *MockUsecase) UploadAvatar(file multipart.File, fileType string, user *models.User) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadAvatar", file, fileType, user)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadAvatar indicates an expected call of UploadAvatar
func (mr *MockUsecaseMockRecorder) UploadAvatar(file, fileType, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadAvatar", reflect.TypeOf((*MockUsecase)(nil).UploadAvatar), file, fileType, user)
}

// ComparePassword mocks base method
func (m *MockUsecase) ComparePassword(passIn, passDest string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ComparePassword", passIn, passDest)
	ret0, _ := ret[0].(error)
	return ret0
}

// ComparePassword indicates an expected call of ComparePassword
func (mr *MockUsecaseMockRecorder) ComparePassword(passIn, passDest interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ComparePassword", reflect.TypeOf((*MockUsecase)(nil).ComparePassword), passIn, passDest)
}

// CheckEmpty mocks base method
func (m *MockUsecase) CheckEmpty(usr models.User) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckEmpty", usr)
	ret0, _ := ret[0].(bool)
	return ret0
}

// CheckEmpty indicates an expected call of CheckEmpty
func (mr *MockUsecaseMockRecorder) CheckEmpty(usr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckEmpty", reflect.TypeOf((*MockUsecase)(nil).CheckEmpty), usr)
}

// CheckAvatar mocks base method
func (m *MockUsecase) CheckAvatar(file multipart.File) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckAvatar", file)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckAvatar indicates an expected call of CheckAvatar
func (mr *MockUsecaseMockRecorder) CheckAvatar(file interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckAvatar", reflect.TypeOf((*MockUsecase)(nil).CheckAvatar), file)
}
