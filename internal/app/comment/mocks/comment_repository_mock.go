// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go

// Package comment_mock is a generated GoMock package.
package comment_mock

import (
	commModel "github.com/go-park-mail-ru/2020_2_JMickhs/internal/app/comment/models"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockRepository is a mock of Repository interface
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// GetComments mocks base method
func (m *MockRepository) GetComments(hotelID string, limit int, offset string, user_id int) ([]commModel.FullCommentInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetComments", hotelID, limit, offset, user_id)
	ret0, _ := ret[0].([]commModel.FullCommentInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetComments indicates an expected call of GetComments
func (mr *MockRepositoryMockRecorder) GetComments(hotelID, limit, offset, user_id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetComments", reflect.TypeOf((*MockRepository)(nil).GetComments), hotelID, limit, offset, user_id)
}

// AddComment mocks base method
func (m *MockRepository) AddComment(comment commModel.Comment) (commModel.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddComment", comment)
	ret0, _ := ret[0].(commModel.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddComment indicates an expected call of AddComment
func (mr *MockRepositoryMockRecorder) AddComment(comment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddComment", reflect.TypeOf((*MockRepository)(nil).AddComment), comment)
}

// DeleteComment mocks base method
func (m *MockRepository) DeleteComment(ID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteComment", ID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteComment indicates an expected call of DeleteComment
func (mr *MockRepositoryMockRecorder) DeleteComment(ID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteComment", reflect.TypeOf((*MockRepository)(nil).DeleteComment), ID)
}

// UpdateComment mocks base method
func (m *MockRepository) UpdateComment(comment *commModel.Comment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateComment", comment)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateComment indicates an expected call of UpdateComment
func (mr *MockRepositoryMockRecorder) UpdateComment(comment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateComment", reflect.TypeOf((*MockRepository)(nil).UpdateComment), comment)
}

// UpdateHotelRating mocks base method
func (m *MockRepository) UpdateHotelRating(hotelID int, NewRate float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateHotelRating", hotelID, NewRate)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateHotelRating indicates an expected call of UpdateHotelRating
func (mr *MockRepositoryMockRecorder) UpdateHotelRating(hotelID, NewRate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateHotelRating", reflect.TypeOf((*MockRepository)(nil).UpdateHotelRating), hotelID, NewRate)
}

// GetCurrentRating mocks base method
func (m *MockRepository) GetCurrentRating(hotelID int) (commModel.RateInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentRating", hotelID)
	ret0, _ := ret[0].(commModel.RateInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrentRating indicates an expected call of GetCurrentRating
func (mr *MockRepositoryMockRecorder) GetCurrentRating(hotelID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentRating", reflect.TypeOf((*MockRepository)(nil).GetCurrentRating), hotelID)
}

// CheckUser mocks base method
func (m *MockRepository) CheckUser(comment *commModel.Comment) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckUser", comment)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckUser indicates an expected call of CheckUser
func (mr *MockRepositoryMockRecorder) CheckUser(comment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckUser", reflect.TypeOf((*MockRepository)(nil).CheckUser), comment)
}

// CheckRateExistForComments mocks base method
func (m *MockRepository) CheckRateExistForComments(hotelID, userID int) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckRateExistForComments", hotelID, userID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckRateExistForComments indicates an expected call of CheckRateExistForComments
func (mr *MockRepositoryMockRecorder) CheckRateExistForComments(hotelID, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckRateExistForComments", reflect.TypeOf((*MockRepository)(nil).CheckRateExistForComments), hotelID, userID)
}

// GetCommentsCount mocks base method
func (m *MockRepository) GetCommentsCount(hotelID int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommentsCount", hotelID)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCommentsCount indicates an expected call of GetCommentsCount
func (mr *MockRepositoryMockRecorder) GetCommentsCount(hotelID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommentsCount", reflect.TypeOf((*MockRepository)(nil).GetCommentsCount), hotelID)
}
