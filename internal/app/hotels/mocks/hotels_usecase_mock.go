// Code generated by MockGen. DO NOT EDIT.
// Source: usecase.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	models "github.com/go-park-mail-ru/2020_2_JMickhs/internal/app/hotels/models"
	gomock "github.com/golang/mock/gomock"
)

// MockUsecase is a mock of Usecase interface
type MockUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockUsecaseMockRecorder
}

// MockUsecaseMockRecorder is the mock recorder for MockUsecase
type MockUsecaseMockRecorder struct {
	mock *MockUsecase
}

// NewMockUsecase creates a new mock instance
func NewMockUsecase(ctrl *gomock.Controller) *MockUsecase {
	mock := &MockUsecase{ctrl: ctrl}
	mock.recorder = &MockUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUsecase) EXPECT() *MockUsecaseMockRecorder {
	return m.recorder
}

// GetHotels mocks base method
func (m *MockUsecase) GetHotels(StartID int) ([]models.Hotel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHotels", StartID)
	ret0, _ := ret[0].([]models.Hotel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHotels indicates an expected call of GetHotels
func (mr *MockUsecaseMockRecorder) GetHotels(StartID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHotels", reflect.TypeOf((*MockUsecase)(nil).GetHotels), StartID)
}

// GetHotelByID mocks base method
func (m *MockUsecase) GetHotelByID(ID int) (models.Hotel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHotelByID", ID)
	ret0, _ := ret[0].(models.Hotel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHotelByID indicates an expected call of GetHotelByID
func (mr *MockUsecaseMockRecorder) GetHotelByID(ID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHotelByID", reflect.TypeOf((*MockUsecase)(nil).GetHotelByID), ID)
}

// FetchHotels mocks base method
func (m *MockUsecase) FetchHotels(pattern string, cursor models.Cursor, limit int) (models.SearchData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchHotels", pattern, cursor, limit)
	ret0, _ := ret[0].(models.SearchData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchHotels indicates an expected call of FetchHotels
func (mr *MockUsecaseMockRecorder) FetchHotels(pattern, cursor, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchHotels", reflect.TypeOf((*MockUsecase)(nil).FetchHotels), pattern, cursor, limit)
}

// DecodeCursor mocks base method
func (m *MockUsecase) DecodeCursor(cursor string) (models.FilterData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DecodeCursor", cursor)
	ret0, _ := ret[0].(models.FilterData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DecodeCursor indicates an expected call of DecodeCursor
func (mr *MockUsecaseMockRecorder) DecodeCursor(cursor interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecodeCursor", reflect.TypeOf((*MockUsecase)(nil).DecodeCursor), cursor)
}

// EncodeCursor mocks base method
func (m *MockUsecase) EncodeCursor(data models.FilterData) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EncodeCursor", data)
	ret0, _ := ret[0].(string)
	return ret0
}

// EncodeCursor indicates an expected call of EncodeCursor
func (mr *MockUsecaseMockRecorder) EncodeCursor(data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EncodeCursor", reflect.TypeOf((*MockUsecase)(nil).EncodeCursor), data)
}
